/*! \page CreatingGameObject Creating a Game Object

\section updateSystem The Update System
The Update system is exactly what it sounds like: it is the system that updates all registered objects every frame.

This system is very easy to use. Any object you would like to update simply needs to derive from the \c UpdateObject class.

There are three main functions you need to know about in the \c UpdateObject class.
- \c UpdateObject::RequestUpdateRegistration
- \c UpdateObject::RequestUpdateDeregistration
- \c UpdateObject::Update

\c RequestUpdateRegistration and \c RequestUpdateDeregistration can only be called by an \c UpdateObject -derived class, meaning
the object that wants to be updated (or stop being updated) needs to call it.

\c Update is a function you need to override if you want anything to actually happen when it is updated. It's as simple as
declaring \c "virtual void Update(float deltaTime) override;" in your object's header file, and defining the update behavior
in the \c cpp file.

\note This engine is not framerate-controlled! A frame will render as soon as it can, meaning the time between frames is unknown.
Any behavior (such as movement) need to be multiplied by the provided \c deltaTime argument in order to appear normal!

\subsection updateSystem_exampleCode Example
The following is an example of how one might implement a Mario class in this engine.
\code
// Mario.h
#ifndef MARIO_H
#define MARIO_H

#include "../Engine Code/UpdateObject.h"

class Mario : public UpdateObject
{
public:
	Mario();
	Mario(const Mario& m) = delete;
	Mario& operator=(const Mario& m) = delete;
	virtual ~Mario();

	virtual void Update(float deltaTime) override;

private:
	sf::Vector2f pos;
	sf::Vector2f posDelta;
}

#endif
\endcode
\code
// Mario.cpp
#include "Mario.h"

#include "DesignerControls.h"

Mario::Mario() // and Luigi Mario?
	: pos(0.0f, 0.0f),
	posDelta(0.0f, 0.0f)
{
	RequestUpdateRegistration();
}

Mario::~Mario()
{
	RequestUpdateDeregistration();
}

void Mario::Update(float deltaTime)
{
	// apply gravity
	posDelta.y += GRAVITY * deltaTime; // deltaTime is a function argument. Use it anytime you have behavior occurring over time
	// GRAVITY is from the DesignerControls.h file

	// apply any movement
	pos += posDelta;
}
\endcode

\section drawSystem The Draw System
The Draw system is very similar to the Update system in many ways. It is simple to use, and it only has three functions you need
to worry about:
- \c DrawObject::RequestDrawRegistration
- \c DrawObject::RequestDrawDeregistration
- \c DrawObject::Draw

Just like with updating, \c RequestDrawRegistration and \c RequestDrawDeregistration can only be called by a \c DrawObject -derived
class, and \c Draw is the function you need to override if you actually want to see anything happen.

\subsection drawSystem_exampleCode Example
Building on the previous example, we want to be able to see Mario on screen.
\code
// Mario.h
#ifndef MARIO_H
#define MARIO_H

#include <SFML/Graphics.hpp> // newly added

#include "../Engine Code/UpdateObject.h"
#include "../Engine Code/DrawObject.h" // newly added

class Mario : public UpdateObject, public DrawObject // newly added
{
public:
	Mario();
	Mario(const Mario& m) = delete;
	Mario& operator=(const Mario& m) = delete;
	virtual ~Mario();

	virtual void Update(float deltaTime) override;
	virtual void Draw() override; // newly added

private:
	sf::Sprite* pSprite; // newly added
	sf::Vector2f pos;
	sf::Vector2f posDelta;
}

#endif
\endcode
\code
// Mario.cpp
#include "Mario.h"

#include "../Engine Code/JumpSlashEngine.h"
#include "../Engine Code/SpriteManager.h"

#include "DesignerControls.h"

Mario::Mario()
	: pSprite(SpriteManager::GetSprite("mario")), // newly added
	pos(0.0f, 0.0f),
	posDelta(0.0f, 0.0f)
{
	RequestUpdateRegistration();
	RequestDrawRegistration(); // newly added
}

Mario::~Mario()
{
	RequestUpdateDeregistration();
	RequestDrawDeregistration(); // newly added
}

void Mario::Update(float deltaTime)
{
	posDelta.y += GRAVITY * deltaTime;

	pos += posDelta;
}

// vvv newly added vvv
void Mario::Draw()
{
	pSprite->setPosition(pos);
	JumpSlashEngine::GetWindow().draw(*pSprite);
}
// ^^^ newly added ^^^
\endcode

\section inputSystem The Input System
While the Input system is similar to the Update and Draw systems in many ways, it is not as simple to use. You have a lot more
functions at your disposal, and it may be a little overwhelming to use at first. Hopefully this guide will make it feel simpler
than it looks!

There are several functions you have at your disposal when you derive from the InputObject class:

For keyboard inputs:
- InputObject::RequestKeyRegistration
- InputObject::RequestKeyDeregistration
- InputObject::KeyPressed
- InputObject::KeyReleased

For mouse button inputs (clicking):
- InputObject::RequestMouseBtnRegistration
- InputObject::RequestMouseBtnDeregistration
- InputObject::MouseBtnPressed
- InputObject::MouseBtnReleased

For mouse cursor inputs (movement):
- InputObject::RequestMouseCursorRegistration
- InputObject::RequestMouseCursorDeregistration
- InputObject::MouseCursorMoved

Let's keep things simple for now, and only worry about keyboard inputs. Just like with updating and drawing, the "Request"
functions (\c RequestKeyRegistration , \c RequestKeyDeregistration , etc.) can only be called by an \c InputObject -derived
class, and it's how you tell the engine you want to know when an input of the requested type occurs.

When you call \c RequestKeyRegistration (and \c RequestKeyDeregistration ), you need to provide some information, though.
First, you need to tell it what key you want to recieve inputs from. This is defined using the \c sf::Keyboard::Key type through
SFML. If you type in \c "sf::Keyboard::" , IntelliSense will provide you with a list of available keys. Second, you need to tell
it what \c KeyEvent you would like to know about. There are only two \c KeyEvent s: \c KeyEvent::Press and \c KeyEvent::Release .
If you would like to register for both events for the same key, you must call the function twice.

However, you must override the \c KeyPressed and/or \c KeyReleased functions if you want to define the behavior of a key press or
release.

\note \c KeyPressed is called when a \c KeyEvent::Press occurs, and likewise for \c KeyReleased and \c KeyEvent::Release . There is
nothing stopping you from overriding one of those functions even if you never register for the corresponding event, and doing so
will not cause any problems. For example, if you want to preemptively override the \c KeyReleased function knowing you'll need it
in the future, it'll just sit there never being called, but not causing any issues. (The same applies to mouse buttons and cursor).

\subsection inputSystem_exampleCode Example
Let's expand on the previous examples to make Mario walk left and right when you use the arrow keys.
\code
// Mario.h
#ifndef MARIO_H
#define MARIO_H

#include <SFML/Graphics.hpp>

#include "../Engine Code/UpdateObject.h"
#include "../Engine Code/DrawObject.h"
#include "../Engine Code/InputObject.h" // newly added

class Mario : public UpdateObject, public DrawObject, public InputObject // newly added
{
public:
	Mario();
	Mario(const Mario& m) = delete;
	Mario& operator=(const Mario& m) = delete;
	virtual ~Mario();

	virtual void Update(float deltaTime) override;
	virtual void Draw() override;
	virtual void KeyPressed(sf::Keyboard::Key key) override; // newly added
	virtual void KeyReleased(sf::Keyboard::Key key) override; // newly added

private:
	sf::Sprite* pSprite;
	sf::Vector2f pos;
	sf::Vector2f posDelta;
}

#endif
\endcode
\code
// Mario.cpp
#include "Mario.h"

#include "../Engine Code/JumpSlashEngine.h"
#include "../Engine Code/SpriteManager.h"

#include "DesignerControls.h"

Mario::Mario()
	: pSprite(SpriteManager::GetSprite("mario")),
	pos(0.0f, 0.0f),
	posDelta(0.0f, 0.0f)
{
	RequestUpdateRegistration();
	RequestDrawRegistration();
	RequestKeyRegistration(sf::Keyboard::Left, KeyEvent::Press); // newly added
	RequestKeyRegistration(sf::Keyboard::Left, KeyEvent::Release); // newly added
	RequestKeyRegistration(sf::Keyboard::Right, KeyEvent::Press); // newly added
	RequestKeyRegistration(sf::Keyboard::Right, KeyEvent::Release); // newly added
}

Mario::~Mario()
{
	RequestUpdateDeregistration();
	RequestDrawDeregistration();
	RequestKeyDeregistration(sf::Keyboard::Left, KeyEvent::Press); // newly added
	RequestKeyDeregistration(sf::Keyboard::Left, KeyEvent::Release); // newly added
	RequestKeyDeregistration(sf::Keyboard::Right, KeyEvent::Press); // newly added
	RequestKeyDeregistration(sf::Keyboard::Right, KeyEvent::Release); // newly added
}

void Mario::Update(float deltaTime)
{
	posDelta.y += GRAVITY; // removed multiplication by deltaTime because other things are modifying posDelta now

	pos += posDelta * deltaTime; // multiply by deltaTime here to make sure all movement is smoothed
}

void Mario::Draw()
{
	pSprite->setPosition(pos);
	JumpSlashEngine::GetWindow().draw(*pSprite);
}

// vvv newly added vvv
void Mario::KeyPressed(sf::Keyboard::Key key)
{
	switch(key)
	{
	case sf::Keyboard::Left:
		posDelta.x -= PLAYER_WALK_SPEED; // variable is from DesignerControls.h
		break;
	case sf::Keyboard::Right:
		posDelta.x += PLAYER_WALK_SPEED;
		break;
	}
}
// ^^^ newly added ^^^

// vvv newly added vvv
void Mario::KeyReleased(sf::Keyboard::Key key)
{
	switch(key)
	{
	case sf::Keyboard::Left:
	case sf::Keyboard::Right:
		posDelta.x = 0;
		break;
	}
}
// ^^^ newly added ^^^
\endcode

\section alarmSystem The Alarm System (coming soon)

\section collisionSystem The Collision System (coming soon)

TODO: documentation for CreatingGameObject tutorial is incomplete

Previous tutorial: \ref CreatingScene "Creating a Scene"
*/