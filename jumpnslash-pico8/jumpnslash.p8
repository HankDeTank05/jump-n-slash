pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--jump 'n' slash
--designed by joseph turzitti
--programmed by henry holman

function _init()
end

function _update60()
	p1.update()
end

function _draw()
	cls() --clear screen
	
	--draw the map
	map(0,0,
	    0,0,
	    16,16)
	
	--draw the player
	p1.draw(true)
end
-->8
--tab 1: reference

--[[
sprite flags
------------

num | hex  | color  | meaning
---------------------------
 0  | 0x1  | red    | hurts player
 1  | 0x2  | orange |
 2  | 0x4  | yellow | 
 3  | 0x8  | green  | player can land on top of
 4  | 0x10 | blue   | player cannot pass thru sides
 5  | 0x20 | gray   | player cannot pass thru bottom
 6  | 0x40 | pink   |
 7  | 0x80 | tan    |
]]
-->8
--tab 2: player

p1={
	x=16,y=100,
	dx=0,y_vel=0,
	w=8,h=16,
	lft=nil,--left x
	rgt=nil,--right x
	top=nil,--top y
	btm=nil,--bottom y
	ctr=nil,--center x
	mdl=nil,--middle y
	facing=1, --1=right, -1=left
	bonked=false,
	landed=false,
}
jump_height=-4
walk_speed=1
gravity=0.2

function p1.update()
	p1.read_inputs()
	
	p1.platform_collision()
	
	--apply forces
	p1.move()
	
	p1.update_landmarks()
	
end

function p1.read_inputs()
	--read for inputs
	if btnp(⬆️) and p1.landed==true then
		p1.y_vel=jump_height
		p1.landed=false
	end
	
	p1.dx=0
	if btn(➡️) then
		p1.dx+=walk_speed
		if p1.facing<0 then
			p1.facing*=-1
		end
	end
	if btn(⬅️) then
	 p1.dx-=walk_speed
	 if p1.facing>0 then
	 	p1.facing*=-1
	 end
	end
	
	p1.update_landmarks()
end

function p1.platform_collision()

	--check if you bonked your
	--head if you're on your
	--way up
	if p1.y_vel<0 then
		--check both top corners
	end
	
	--check if you landed on a
	--platform if you're on your
	--way down
	if p1.y_vel>=0 then
		--check both btm corners
		p1.landed=p1.land_detection()
	end
	
end

function p1.land_detection()
	--checks the row below the
	--bottom of the sprite
	local tile_id_l=mget(p1.lft/8,(p1.btm+1)/8)
	local tile_id_r=mget(p1.rgt/8,(p1.btm+1)/8)
	return fget(tile_id_l,3) or fget(tile_id_r,3)
end


function p1.stand_detection()
	--checks the bottom row of the
	--sprite
	local tile_id_l=mget(p1.lft/8,p1.btm/8)
	local tile_id_r=mget(p1.rgt/8,p1.btm/8)
	return not(fget(tile_id_l,3) or fget(tile_id_r,3))
end

function p1.move()
	--determine wall collision
	--with four candidates
	--1. top ray
	--2. mid ray
	--3. btm ray
	--4. vel ray
	cand_tx=p1.lft
	cand_ty=p1.top
	cand_mx=p1.lft
	cand_my=p1.mdl
	cand_bx=p1.lft
	cand_by=p1.btm
	if p1.dx>0 then
		--cast rays to right
		--top ray
		while fget(mget(cand_tx/8,cand_ty/8),4)==false do
			cand_tx+=1
		end
		cand_tx-=p1.w
		--mdl ray
		while fget(mget(cand_mx/8,cand_my/8),4)==false do
			cand_mx+=1
		end
		cand_mx-=p1.w
		--btm ray
		while fget(mget(cand_bx/8,cand_by/8),4)==false do
			cand_bx+=1
		end
		cand_bx-=p1.w
	elseif p1.dx<0 then
		--cast rays to left
		--top ray
		while fget(mget(cand_tx/8,cand_ty/8),4)==false do
			cand_tx-=1
		end
		cand_tx+=1
		--mdl ray
		while fget(mget(cand_mx/8,cand_my/8),4)==false do
			cand_mx-=1
		end
		cand_mx+=1
		--btm ray
		while fget(mget(cand_bx/8,cand_by/8),4)==false do
			cand_bx-=1
		end
		cand_bx+=1
	end
	cand_vx=p1.x+p1.dx
	
	if p1.dx>0 then
		--facing right, so pick the
		--smallest (leftmost number)
		p1.x=min(cand_vx,min(cand_mx,min(cand_tx,cand_bx)))
	elseif p1.dx<0 then
		--facing left, so pick the
		--largest (rightmost number)
		p1.x=max(cand_vx,max(cand_mx,max(cand_tx,cand_bx)))
	end
	
	--this is the landing algo.
	--it ensures you never pass
	--through platforms no matter
	--how fast you're falling.
	
	--every frame, two rays are
	--cast straight downwards from
	--both the left and right
	--edges of the sprite.
	
	--from each of these rays, a
	--"candidate" landing height
	--is determined
	
	--we also determine a third
	--candidate landing height
	--based on the current y-pos
	--and y-vel.
	
	--the highest candidate height
	--(vertically nearest below
	--the sprite) is chosen
	
	--this way, if you're falling
	--faster than 8 pix/frame you
	--will not pass through a
	--one-tile-tall platform
	
	--determine candidate l
	--using raycasting
	cand_lx=p1.lft
	cand_ly=p1.top
	if p1.y_vel>=0 then
		while fget(mget(cand_lx/8,(cand_ly+p1.h)/8),3)==false do
			cand_ly+=1
		end
	else
		while fget(mget(cand_lx/8,cand_ly/8),5)==false do
			cand_ly-=1
		end
		cand_ly+=1
	end
	
	--determine candidate r
	--using raycasting
	cand_rx=p1.rgt
	cand_ry=p1.top
	if p1.y_vel>=0 then
		while fget(mget(cand_rx/8,(cand_ry+p1.h)/8),3)==false do
			cand_ry+=1
		end
	else
		while fget(mget(cand_rx/8,cand_ry/8),5)==false do
			cand_ry-=1
		end
		cand_ry+=1
	end
	
	--determine candidate v
	--using velocity
	cand_vy=p1.y+p1.y_vel
	
	if p1.y_vel>=0 then
		p1.y=min(cand_vy,min(cand_ly,cand_ry))
	else
		p1.y=max(cand_vy,max(cand_ly,cand_ry))
		if p1.y==cand_ly or p1.y==cand_ry then
			p1.y_vel=0
		end
	end
	
	if p1.landed==true then
		p1.y_vel=0
	elseif p1.bonked==true then
		p1.y_vel=0
		p1.bonked=false
	else
		p1.y_vel+=gravity
	end
end

function p1.update_landmarks()
	p1.lft=p1.x
	p1.rgt=p1.x+p1.w-1
	p1.top=p1.y
	p1.btm=p1.y+p1.h-1
	p1.ctr=(p1.lft+p1.rgt)/2
	p1.mdl=(p1.top+p1.btm)/2
end
	
function p1.draw(debug)
	sspr(8,0,
	     8,16,
	     p1.x,p1.y,
	     8,16,
	     p1.facing==-1,false)
	
	if debug then
		
		if false then
			--print/draw wall detection
			
			--print numbers
			print(cand_tx,10,10,15)
			print(cand_mx,10,16,15)
			print(cand_vx,10,22,15)
			print(cand_bx,10,28,15)
			
			--draw rays
			if p1.dx>0 then
				--moving right
				line(p1.rgt,p1.top,cand_tx+p1.w-1,cand_ty,11)
				line(p1.rgt,p1.mdl,cand_mx+p1.w-1,cand_my,11)
				line(p1.rgt,(p1.mdl+p1.btm)/2,cand_vx+p1.w-1,(p1.mdl+p1.btm)/2,11)
				line(p1.rgt,p1.btm,cand_bx+p1.w-1,cand_by,11)
			elseif p1.dx<0 then
				--moving left
				line(p1.lft,p1.top,cand_tx,cand_ty,11)
				line(p1.lft,p1.mdl,cand_mx,cand_my,11)
				line(p1.lft,(p1.mdl+p1.btm)/2,cand_vx,(p1.mdl+p1.btm)/2,11)
				line(p1.lft,p1.btm,cand_bx,cand_by,11)
			end
		end
		
		if false then
			--print/draw bonk/land
			--detection
			
			--print numbers
			print(cand_ly,30,30,15)--lft
			print(cand_vy,40,36,15)--vel
			print(cand_ry,50,42,15)--rgt
			
			--draw rays
			if p1.y_vel>0 then
				--falling
				line(p1.lft,p1.btm,cand_lx,cand_ly+p1.h-1,11)
				line(p1.ctr,p1.btm,p1.ctr,cand_vy+p1.h-1,11)
				line(p1.rgt,p1.btm,cand_rx,cand_ry+p1.h-1,11)
			elseif p1.y_vel<0 then
				--rising
				line(p1.lft,p1.top,cand_lx,cand_ly,11)
				line(p1.ctr,p1.top,p1.ctr,cand_vy,11)
				line(p1.rgt,p1.top,cand_rx,cand_ry,11)
			end
		end
		
		--draw landmark pixels
		if false then
			local pcol=8
			--draw top left corner pixel
			pset(p1.lft,
			     p1.top,
			     pcol)
			--draw top center pixel
			pset(p1.ctr,
			     p1.top,
			     pcol)
			--draw top right corner pixel
			pset(p1.rgt,
			     p1.top,
			     pcol)
			
			--draw left middle pixel
			pset(p1.lft,
			     p1.mdl,
			     pcol)
			--draw right middle pixel
			pset(p1.rgt,
			     p1.mdl,
			     pcol)
			
			--draw btm left corner pixel
			pset(p1.lft,
			     p1.btm,
			     pcol)
			--draw btm center pixel
			pset(p1.ctr,
			     p1.btm,
			     pcol)
			--draw btm right corner pixel
			pset(p1.rgt,
			     p1.btm,
			     pcol)
		end
	end
end
__gfx__
0000000000111100bbb0000000999900009999000000000000000000000000004444444488888888aaaaaaaa0000000000000000000000000000000000000000
0000000001111110000bb00009999990099998900000000000000000000000004555555488888888eaeaeaea0000000000000000000000000000000000000000
00700700111111110bb00b0099999999999999890000000000000000000000004555555488888888707070700000000000000000000000000000000000000000
0007700011111111000bb0b099999999999888880000000000000000000000004555555488888888070707070000000000000000000000000000000000000000
000770001111111100b0b0b099999999999888880000000000000000000000004555555488888888707070700000000000000000000000000000000000000000
0070070011111c11000b0b0b99999899999999890000000000000000000000004555555488888888070707070000000000000000000000000000000000000000
00000000111111c1000b0b0b99999989099998900000000000000000000000004555555488888888707070700000000000000000000000000000000000000000
0000000011cccccc000b0b0b99888888009999000000000000000000000000004444444488888888070707070000000000000000000000000000000000000000
0000000011cccccc000b0b0b99888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111c1000b0b0b99999989000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011111c11000b0b0b99999899000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001111111100b0b0b099999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011111111000bb0b099999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110bb00b0099999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001111110000bb00009999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000111100bbb0000000999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000380108000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0808080808080808080808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000a0a0a0a00000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
080000000a000000000000080808000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000909090900000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0808080808080808080808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
